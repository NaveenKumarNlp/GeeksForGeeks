//{ Driver Code Starts
import java.util.*;
public class MSP
{	
    public static void main(String[] args)
	{
	    Scanner sc=new Scanner(System.in);
		int t=sc.nextInt();
		while (t-- != 0)
		{
			int n=sc.nextInt();
			ArrayList<String> s = new ArrayList<String>(n);
			for (int i=0;i<n;i++)
			    s.add(sc.next());
			String tt;
			tt=sc.next();
			GfG g=new GfG();
			ArrayList<String> res =g.findMatchedWords(s, tt);
			Collections.sort(res);
			for (int i = 0;i < res.size();i++)
			    System.out.print(res.get(i)+" ");
			System.out.println();

		}
	}
}
// } Driver Code Ends


/*Complete the provided function*/

class GfG
{
/* The function returns an array of strings 
present in the dictionary which matches
the string pattern.
You are required to complete this method */

public static ArrayList<String> findMatchedWords(ArrayList<String> dict, String pattern)
	{
	    //add code here.
	   ArrayList<String> list=new ArrayList<>();
	   for(String str:dict){
	       if(pattern.length()==str.length()){
	           HashMap<Character,Character> map1=new HashMap<>();
	           HashMap<Character,Character> map2=new HashMap<>();
	           boolean flag=true;
	           for(int i=0;i<str.length();i++){
	               char c1=pattern.charAt(i);
	               char c2=str.charAt(i);
	               if(map1.containsKey(c1) && map1.get(c1)!=c2){
	                   flag=false;
	                   break;
	               }
	               if(map2.containsKey(c2) && map2.get(c2)!=c1){
	                   flag=false;
	                   break;
	               }
	               map1.put(c1,c2);
	               map2.put(c2,c1);
	           }
	           if(flag){
	               list.add(str);
	           }
	       }
	       
	   }
	   return list;
	}
}
